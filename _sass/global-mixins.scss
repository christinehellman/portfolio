// Rem Conversion

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $base-font-size / 1rem * 1;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == 'number' {
    #{$property}: $px-values / $baseline-rem;
  } @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of($value) != 'number' {
        $rem-values: append($rem-values, $value);
      } @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}

@mixin typography {
  h1 {
    font-family: $font-family-display;
    @include rem('font-size', $heading-one-size);
    @include rem('padding', $global-padding-vertical 0);
  }
  h2 {
    font-family: $font-family-base;
    @include rem('font-size', $heading-two-size);
    font-weight: $font-weight-light;
  }
  h3 {
    font-family: $font-family-base;
    @include rem('font-size', $heading-three-size);
    font-weight: $font-weight-light;
  }
  h4,
  label {
    font-family: $font-family-base;
    @include rem('font-size', $heading-four-size);
    font-weight: $font-weight-light;
  }
  p,
  font-paragraph-size ul,
  li {
    font-family: $font-family-base;
    @include rem('font-size', $font-paragraph-size);
    font-weight: $font-weight-light;
  }
  a {
    font-family: $font-family-base;
    @include rem('font-size', $font-paragraph-size);
    font-weight: $font-weight-light;
  }
  figcaption {
    @include rem('font-size', $small-font-size);
  }
}

@mixin font-small {
  color: $brand-primary;
  padding-bottom: 0;
  text-transform: uppercase;
  font-weight: $font-weight-light;
  @include rem('font-size', $font-small-size);
}

// Transitions/animations/etc

@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin transition($transition...) {
  -moz-transition: $transition;
  -o-transition: $transition;
  -webkit-transition: $transition;
  transition: $transition;
}
@mixin transition-property($property...) {
  -moz-transition-property: $property;
  -o-transition-property: $property;
  -webkit-transition-property: $property;
  transition-property: $property;
}
@mixin transition-duration($duration...) {
  -moz-transition-property: $duration;
  -o-transition-property: $duration;
  -webkit-transition-property: $duration;
  transition-property: $duration;
}
@mixin transition-timing-function($timing...) {
  -moz-transition-timing-function: $timing;
  -o-transition-timing-function: $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function: $timing;
}
@mixin transition-delay($delay...) {
  -moz-transition-delay: $delay;
  -o-transition-delay: $delay;
  -webkit-transition-delay: $delay;
  transition-delay: $delay;
}

// Buttons
@mixin buttons() {
  @include transition(all 0.1s ease-in);
  @include rem('font-size', $base-font-size);
  font-family: $font-family-base;
  font-weight: $base-font-weight;
  margin-top: 3rem;
  width: 100%;
  max-width: 300px;
  max-width: 30rem;
  padding: 0.5rem;
  text-transform: uppercase;
  white-space: normal;
  cursor: pointer;
}

@mixin btn-primary() {
  color: $btn-primary-color;
  background: $btn-primary-bg;
  border: $btn-primary-border;
  @include rem('font-size', $font-paragraph-size);

  &:hover {
    color: $btn-primary-hover-color;
    background: $btn-primary-hover-bg;
    border: $btn-primary-hover-border;
  }
}

// Padding

@mixin global-padding() {
  @include rem('padding', $global-padding-vertical, $global-padding-horizontal);
}

// Layouts
@mixin grid-50() {
  display: grid;
  -ms-grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  grid-gap: 1rem 3rem;
  min-width: 0;
}

@mixin flex() {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}
